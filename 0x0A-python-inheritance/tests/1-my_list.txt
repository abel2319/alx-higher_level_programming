The ``1-my_list`` module
======================

Using ``class MyList``
-------------------

First import ``MyList`` from the ``1-my_list`` module:

    >>> MyList = __import__('1-my_list').MyList

Now we use it:

check instabtiation
	>>> merino = MyList()
	>>> type(merino)
	<class '1-my_list.MyList'>


Verify that MyList inherits from list:
	>>> issubclass(MyList, list)
	True

sort an empty list
	>>> l = MyList()
	>>> l.print_sorted()
	[]

If an argument is past to the function
	>>> l.print_sorted(1)
	Traceback (most recent call last):
	...
	TypeError: MyList.print_sorted() takes 1 positional argument but 2 were given

check append
	>>> merino = MyList()
	>>> merino.append(4)
	>>> merino.print_sorted()
	[4]

check print_sorted() with sorted append
	>>> merino = MyList()
	>>> merino.append(0)
	>>> merino.append(1)
	>>> merino.append(2)
	>>> merino.append(3)
	>>> merino.append(4)
	>>> merino.print_sorted()
	[0, 1, 2, 3, 4]

check print_sorted() with no sorted append
	>>> merino = MyList()
	>>> merino.append(4)
	>>> merino.append(2)
	>>> merino.append(3)
	>>> merino.append(1)
	>>> merino.append(0)
	>>> merino.print_sorted()
	[0, 1, 2, 3, 4]

check print_sorted() with no sorted append with negative number
	>>> merino = MyList()
	>>> merino.append(-5)
	>>> merino.append(-2)
	>>> merino.append(-7)
	>>> merino.append(-9)
	>>> merino.append(-1)
	>>> merino.print_sorted()
	[-9, -7, -5, -2, -1]

